/* Nunjucks是一个模版引擎, 基于模板配合数据构造出字符串输出的一个组件 */
function examResult (data) {
  return `${data.name}同学一年级期末考试语文${data.chinese}分, 数学${data.math}分,位于年级第${data.ranking}名`
}
examResult({
  name: '小明',
  chinese: '78',
  math: '87',
  ranking: '999'
})
/* 该模板引擎把模板字符串里对应的变量替换以后就可以得到输出 */
/* 模板引擎最常见的输出就是输出网页, 也就是HTML文本, 也可以输出Text, XML, Markdown等其他文本 */

/* JS的模板字符串可以实现模板功能, 为什么还需要另外的模板引擎: 因为JS的模板字符串必须写在JS代码中, 想写出复杂的页面非常困难,
* 另外输出HTML有几个重要问题需要考虑:
* */

/* 转义 */
/* 对特殊字符需要转义, 避免收到XSS攻击, 比如如果变量name的值不是小明, 而是小明<script>...</script>, 模版引擎输出的HTML到了浏览器, 就会自动执行恶意JS代码 */
/* 格式化 */
/* 对不同类型的变量需要格式化, 比如货币需要变成12,345.00这样的格式, 日期需要变成2016-01-01这样的格式 */
/* 简单逻辑 */
/* 模板还要能执行一些简单逻辑, 比如, 要按条件输出内容, 需要if实现如下输出 */
/*{{name}}同学,
{% if score >= 90%}
  成绩优秀,应该奖励
{% elif score >=60%}
  成绩良好,继续努力
{% else %}
  不及格
{% endif %}*/

/* Nunjucks */
/* 选择Nunjucks作为模板引擎, 是Mozilla开发的一款纯JS编写的模板引擎, 既可以用在Node环境下, 又可以运行在浏览器端, 主要还是运行在Node下,
* 因为浏览器端有更好的模版解决方案, 例如MVVM框架
*  虽然模板引擎内部可能非常复杂, 但是使用一个模板引擎是非常简单的, 因为本质上只需要构造一个函数
* */
function render(view, model) {
  // TODO:...
}
/*
*   其中view是模板的名称(又称为视图), 因为可能存在多个模板, 需要选择其中一个, model就是数据, 在JS中它就是一个简单的Object, render函数返回一个字符串,
* 就是模板的输出
* */
/* 创建一个use-nunjucks的VS Code工程结构如下 */

