/* 最早的软件都是运行在大型机上的, 软件使用者通过哑终端登录到大型机上去运行软件, 后来随着PC机的兴起, 软件开始主要运行在桌面上, 而数据库这样的软件
* 运行在服务器端, 这种Client/Server 模式简称CS架构 */

/* 随着互联网兴起逐渐发现CS架构不适合Web, 最大的原因在于Web应用程序的修改和升级非常迅速, 而CS架构需要每个客户逐个升级桌面APP, 因此Browser/Server
* 架构开始流行, 简称BS架构
*  在BS架构下, 客户端只需要浏览器, 应用程序的逻辑和数据都存储在服务器端, 浏览器只需要请求服务器并获取Web页面, 把Web页面展示给用户即可
*  当然, Web页面也具有极强的交互性, 由于Web页面使用HTML编写, 而HTML具备超强的表现力, 并且服务器端升级后, 客户端无需任何部署就可以使用到新的版本,
* BS架构迅速风靡 */

/* 如今除了重量级软件如Office, Photoshop等, 大部分软件都以Web形式提供, 比如新浪提供的新闻,博客,微博服务等, 均是Web应用 */

/* Web应用开发也经历了好几个阶段:
*   1.静态Web页面: 由文本编辑器直接编辑并生成的静态HTML页面, 如果要修改Web页面的内容, 就需要再次编辑HTML源文件, 早期互联网Web页面就是静态的,
*   2.CGI: 由于静态页面无法与用户交互, 要处理用户发送的动态数据, 出现了Common Gateway Interface, 简称CGI, 用C/C++编写, 直接向浏览器输出拼接后的字符串
*   3.ASP/JSP/PHP: 由于Web应用的特点是修改频繁, 用C/C++这样的低级语言非常不适合Web开发, 而脚本语言由于开发效率高, 与HTML结合紧密, 因此迅速取代了GUI模式
*     ASP是微软推出的用VBScript脚本编程的Web开发技术, 而JSP用Java来编写脚本, PHP本身则是开源的脚本语言
*   4.MVC: 为了解决直接用脚本语言嵌入HTML导致的可维护性差的问题, Web应用也引入了Model-View-Controller的模式来简化Web开发, ASP发展为ASP.Net,
*     JSP和PHP也有一大堆MVC框架
*   5.目前Web开发技术仍在快速发展中, 异步开发, 新的MVVM前端技术层出不穷, 由于Nodejs把JS引入了服务器端, 因此, 原来必须使用PHP/Java/C#/Python/Ruby
*     等其他语言来开发的服务器端程序, 现在可以用Node.js来开发了
* */

/*
* Node.js来开发Web服务端优势:
*   前后端语言统一就没有切换语言的障碍, 掌握了前端JS的开发人员同时可以编写后端代码
*   得益于Node.js天生是异步的, 速度非常快
* Node.js诞生后的短短几年里, 出现了无数种Web框架, ORM框架, 模板引擎, 测试框架, 自动化构建工具
*   常见Web框架: Express, 01_koa, Sails.js等
*   ORM框架相对少点: Sequelize, ORM2等
*   模板引擎: Jade, EJS, Swig等
*   测试框架: Mocha, Expresso, Unit.js等
*   构建工具: WebPack, Grunt等
* */
